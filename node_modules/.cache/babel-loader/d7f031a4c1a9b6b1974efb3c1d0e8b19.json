{"ast":null,"code":"const FETCH_GRAPH_DATA = \"FETCH_GRAPH_DATA\";\nconst SET_LOADING = \"SET_LOADING\"; // const ADD_GRAPH_DATA = \"ADD_GRAPH_DATA\";\n\nconst getGraphData = dispatch => {\n  let result = {\n    sales: [],\n    reviews: []\n  };\n  fetch('./mockData/graphData.json').then(resp => resp.json()).then(resp => {\n    setTimeout(() => {\n      result[\"sales\"] = resp[0].sales;\n      result[\"reviews\"] = resp[0].reviews;\n      dispatch(isInitLoading(false));\n    }, 2000);\n  });\n  return result;\n};\n\nexport const isInitLoading = isLoading => {\n  return {\n    type: SET_LOADING,\n    data: isLoading\n  };\n};\nexport const addData = payloadData => {\n  return {\n    type: FETCH_GRAPH_DATA,\n    data: payloadData\n  };\n};\nexport const fetchGraphData = () => {\n  return dispatch => {\n    dispatch(isInitLoading(true));\n    const resultData = getGraphData(dispatch);\n    dispatch(addData(resultData));\n  };\n};","map":{"version":3,"sources":["/Library/WebServer/Documents/stackline/src/actions/actionFetchGraphData.tsx"],"names":["FETCH_GRAPH_DATA","SET_LOADING","getGraphData","dispatch","result","sales","reviews","fetch","then","resp","json","setTimeout","isInitLoading","isLoading","type","data","addData","payloadData","fetchGraphData","resultData"],"mappings":"AAIA,MAAMA,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,WAAW,GAAG,aAApB,C,CACA;;AAEA,MAAMC,YAAY,GAAIC,QAAD,IAAkB;AACtC,MAAIC,MAAM,GAAG;AACZC,IAAAA,KAAK,EAAE,EADK;AAEZC,IAAAA,OAAO,EAAE;AAFG,GAAb;AAIAC,EAAAA,KAAK,CAAC,2BAAD,CAAL,CACCC,IADD,CACMC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADd,EAECF,IAFD,CAEOC,IAAD,IAAU;AACfE,IAAAA,UAAU,CAAC,MAAM;AAChBP,MAAAA,MAAM,CAAC,OAAD,CAAN,GAAkBK,IAAI,CAAC,CAAD,CAAJ,CAAQJ,KAA1B;AACAD,MAAAA,MAAM,CAAC,SAAD,CAAN,GAAoBK,IAAI,CAAC,CAAD,CAAJ,CAAQH,OAA5B;AACAH,MAAAA,QAAQ,CAACS,aAAa,CAAC,KAAD,CAAd,CAAR;AACA,KAJS,EAIP,IAJO,CAAV;AAKC,GARF;AASA,SAAOR,MAAP;AACA,CAfD;;AAiBA,OAAO,MAAMQ,aAAa,GAAIC,SAAD,IAAqC;AACjE,SAAO;AAAEC,IAAAA,IAAI,EAAEb,WAAR;AAAqBc,IAAAA,IAAI,EAAEF;AAA3B,GAAP;AACA,CAFM;AAIP,OAAO,MAAMG,OAAO,GAAIC,WAAD,IAAiC;AACvD,SAAO;AAAEH,IAAAA,IAAI,EAAEd,gBAAR;AAA0Be,IAAAA,IAAI,EAAEE;AAAhC,GAAP;AACA,CAFM;AAIP,OAAO,MAAMC,cAAc,GAAG,MAAM;AACnC,SAAQf,QAAD,IAAgD;AACtDA,IAAAA,QAAQ,CAACS,aAAa,CAAC,IAAD,CAAd,CAAR;AACA,UAAMO,UAAU,GAAGjB,YAAY,CAACC,QAAD,CAA/B;AACAA,IAAAA,QAAQ,CAACa,OAAO,CAACG,UAAD,CAAR,CAAR;AACA,GAJD;AAKA,CANM","sourcesContent":["import { ThunkAction, ThunkDispatch } from 'redux-thunk';\nimport { AnyAction } from 'redux';\nimport { GraphDataArray, InitialLoad } from '../interfaces/actionsInterface';\n\nconst FETCH_GRAPH_DATA = \"FETCH_GRAPH_DATA\";\nconst SET_LOADING = \"SET_LOADING\";\n// const ADD_GRAPH_DATA = \"ADD_GRAPH_DATA\";\n\nconst getGraphData = (dispatch:any) => {\n\tlet result = {\n\t\tsales: [],\n\t\treviews: []\n\t}\n\tfetch('./mockData/graphData.json')\n\t.then(resp => resp.json())\n\t.then((resp) => {\n\t\tsetTimeout(() => {\n\t\t\tresult[\"sales\"] = resp[0].sales;\n\t\t\tresult[\"reviews\"] = resp[0].reviews;\n\t\t\tdispatch(isInitLoading(false));\n\t\t}, 2000);\n\t\t});\n\treturn result;\n}\n\nexport const isInitLoading = (isLoading: boolean): InitialLoad => {\n\treturn { type: SET_LOADING, data: isLoading }\n};\n\nexport const addData = (payloadData: GraphDataArray) => {\n\treturn { type: FETCH_GRAPH_DATA, data: payloadData }\n};\n\nexport const fetchGraphData = () => {\n\treturn (dispatch: ThunkDispatch<{}, {}, AnyAction>) => {\n\t\tdispatch(isInitLoading(true));\n\t\tconst resultData = getGraphData(dispatch);\n\t\tdispatch(addData(resultData));\n\t}\n};"]},"metadata":{},"sourceType":"module"}