{"ast":null,"code":"var _jsxFileName = \"/Library/WebServer/Documents/stackline/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport DataTable from 'react-data-table-component';\nimport Reviews from './components/Reviews';\nimport Header from './components/Header';\nimport Loader from './components/Loader';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchGraphData } from './actions/actionFetchGraphData';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = {\n  chart: {\n    type: \"spline\"\n  },\n  title: {\n    text: \"Stackline Sales chart\"\n  },\n  yAxis: {\n    title: {\n      text: 'Sales Value'\n    }\n  },\n  xAxis: {\n    categories: []\n  },\n  series: [{\n    data: []\n  }, {\n    data: []\n  }],\n  colors: [\"#052849\", \"#46a8f6\"]\n};\n\nfunction App(props) {\n  _s();\n\n  var _appData$graphListDat, _appData$graphListDat2, _appData$graphListDat3;\n\n  const dispatch = useDispatch();\n  const appData = useSelector(state => state.appData);\n  const [graphOptions, setGraphOptions] = useState(options);\n  const [showGraph, setShowGraph] = useState(false);\n  useEffect(() => {\n    dispatch(fetchGraphData());\n  }, []);\n  useEffect(() => {\n    if (appData && appData.graphListData) {\n      const {\n        reviews,\n        sales\n      } = appData.graphListData;\n      let xAxisCategories = [...graphOptions.xAxis.categories];\n      let yAxisData = [...graphOptions.series];\n      sales.forEach(saleItem => {\n        xAxisCategories.push(saleItem.weekEnding);\n        yAxisData[0].data.push(saleItem.wholesaleSales);\n        yAxisData[1].data.push(saleItem.retailSales);\n      });\n      yAxisData[0].name = \"Wholesale sales\";\n      yAxisData[1].name = \"Retail Sales\";\n      setGraphOptions({ ...graphOptions,\n        xAxis: {\n          categories: xAxisCategories\n        },\n        series: yAxisData\n      });\n      setShowGraph(true);\n    }\n  }, [appData === null || appData === void 0 ? void 0 : (_appData$graphListDat = appData.graphListData) === null || _appData$graphListDat === void 0 ? void 0 : _appData$graphListDat.sales]);\n  const columns = [{\n    name: 'Week Ending',\n    selector: row => row.weekEnding,\n    sortable: true\n  }, {\n    name: 'Retail sales',\n    selector: row => row.retailSales,\n    sortable: true\n  }, {\n    name: 'Wholesale sales',\n    selector: row => row.wholesaleSales,\n    sortable: true\n  }, {\n    name: 'Units sold',\n    selector: row => row.unitsSold,\n    sortable: true\n  }, {\n    name: 'Retailer margin',\n    selector: row => row.retailerMargin,\n    sortable: true\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-wrapper-text\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), appData.isInitialLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-loader\",\n        children: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app-container d-flex\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"charts-container\",\n          children: [showGraph && /*#__PURE__*/_jsxDEV(HighchartsReact, {\n            highcharts: Highcharts,\n            options: graphOptions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 30\n          }, this), showGraph && /*#__PURE__*/_jsxDEV(DataTable, {\n            columns: columns,\n            data: (appData === null || appData === void 0 ? void 0 : (_appData$graphListDat2 = appData.graphListData) === null || _appData$graphListDat2 === void 0 ? void 0 : _appData$graphListDat2.sales) || []\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reviews-container\",\n          children: /*#__PURE__*/_jsxDEV(Reviews, {\n            reviews: (appData === null || appData === void 0 ? void 0 : (_appData$graphListDat3 = appData.graphListData) === null || _appData$graphListDat3 === void 0 ? void 0 : _appData$graphListDat3.reviews) || []\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"4iI23BL6RRtc8OE5M6RcIzkuwGY=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Library/WebServer/Documents/stackline/src/App.tsx"],"names":["React","useEffect","useState","Highcharts","HighchartsReact","DataTable","Reviews","Header","Loader","useDispatch","useSelector","fetchGraphData","options","chart","type","title","text","yAxis","xAxis","categories","series","data","colors","App","props","dispatch","appData","state","graphOptions","setGraphOptions","showGraph","setShowGraph","graphListData","reviews","sales","xAxisCategories","yAxisData","forEach","saleItem","push","weekEnding","wholesaleSales","retailSales","name","columns","selector","row","sortable","unitsSold","retailerMargin","isInitialLoading"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport DataTable from 'react-data-table-component';\nimport Reviews from './components/Reviews';\nimport Header from './components/Header';\nimport Loader from './components/Loader';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchGraphData } from './actions/actionFetchGraphData';\nimport './App.css';\n\n\ninterface SaleItem {\n  retailSales: number\n  retailerMargin: number\n  unitsSold: number\n  weekEnding: string\n  wholesaleSales: number\n}\n\ninterface GraphOptionsData {\n  chart: {\n    type: string\n  },\n  title: {\n    text: string\n  },\n  yAxis: {\n    title: {\n        text: string,\n        type: string\n    }\n  },\n  xAxis: {\n    categories: any\n  },\n  series: any\n}\n\n\nconst options:any = {\n  chart: {\n    type: \"spline\"\n  },\n  title: {\n    text: \"Stackline Sales chart\"\n  },\n  yAxis: {\n    title: {\n        text: 'Sales Value'\n    }\n  },\n  xAxis: {\n    categories: []\n  },\n  series: [\n    {\n      data: []\n    },\n    {\n      data: []\n    }\n  ],\n  colors: [\"#052849\", \"#46a8f6\"]\n};\n\nfunction App(props: any) {\n  const dispatch = useDispatch();\n  const appData = useSelector((state:any) => state.appData);\n\n  const [graphOptions, setGraphOptions] = useState(options);\n  const [showGraph, setShowGraph] = useState(false);\n\n  useEffect(() => {\n    dispatch(fetchGraphData());\n  }, []);\n\n  useEffect(() => {\n    if (appData && appData.graphListData) {\n      const { reviews, sales } = appData.graphListData;\n      let xAxisCategories = [...graphOptions.xAxis.categories];\n      let yAxisData = [...graphOptions.series]\n      sales.forEach((saleItem:SaleItem) => {\n        xAxisCategories.push(saleItem.weekEnding);\n        yAxisData[0].data.push(saleItem.wholesaleSales);\n        yAxisData[1].data.push(saleItem.retailSales);\n      });\n      yAxisData[0].name = \"Wholesale sales\";\n      yAxisData[1].name = \"Retail Sales\";\n      setGraphOptions({\n        ...graphOptions,\n        xAxis: {\n          categories: xAxisCategories\n        },\n        series: yAxisData\n      });\n      setShowGraph(true);\n    }\n  }, [appData?.graphListData?.sales]);\n\n  const columns = [\n    {\n        name: 'Week Ending',\n        selector: (row: any) => row.weekEnding,\n        sortable: true\n    },\n    {\n        name: 'Retail sales',\n        selector: (row: any) => row.retailSales,\n        sortable: true\n    },\n    {\n      name: 'Wholesale sales',\n      selector: (row: any) => row.wholesaleSales,\n      sortable: true\n    },\n    {\n      name: 'Units sold',\n      selector: (row: any) => row.unitsSold,\n      sortable: true\n    },\n    {\n      name: 'Retailer margin',\n      selector: (row: any) => row.retailerMargin,\n      sortable: true\n    }\n];\n\n  return (\n    <div className=\"app-wrapper\">\n      <div className='app-wrapper-text'>\n        <Header />\n        {\n              appData.isInitialLoading && (\n                <div className='chart-loader'>\n                  <Loader />  \n                </div>\n              )\n            }\n        <div className='app-container d-flex'>\n            <div className='charts-container'>\n              {\n                showGraph && <HighchartsReact highcharts={Highcharts} options={graphOptions} />\n              }\n              {\n                showGraph && (\n                  <DataTable\n                      columns={columns}\n                      data={appData?.graphListData?.sales || []}\n                  />\n                )\n              }\n            </div>\n            <div className='reviews-container'>\n              <Reviews reviews={appData?.graphListData?.reviews || []} />\n            </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}